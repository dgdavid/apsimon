PGL: APSimon, Simon says para Android sobre Processing
======================================================
:Author:    Javier Morales y David Díaz
:Date:      17/12/2012

== Acerca de este documento

La presente documentación recoge, en líneas generales, el resultado final del
proyecto de «Desarrollo de Juegos en 2D» de la asignatura de «Programación
Multimedia y Dispositivos Móviles» (tutorizada por D. Rafael Ascanio Perera) en
el IES El Rincon [http://ieselrincon.org/], llevado a cabo durante el curso
académico 2012/2013 del Ciclo de Formación Profesional «Desarrollo de
Aplicaciones Multiplataforma».

En algunas ocasiones se hacen referencias a «la documentación anterior» o
«dosier anterior» para referirse al primer documento entregado para el mismo
proyecto y misma asignatura, en el cual se hacía una descripción y
planificación/previsión de los objetivos del mismo.


== El proyecto

=== La idea inicial

Implementar el conocido y popular juego de los 80
http://en.wikipedia.org/wiki/Simon_(game)[«Simon says»], creado por Ralph Baer
en 1978, para la plataforma Android haciendo uso del lenguaje de programación
http://processing.org[«Processing»], distribuido bajo licencia GNU/GPL.

=== Objetivo

El propósito de la creación de este software no ha ido más allá de los fines
didácticos, tal y como se declaraba en el apartado «alcance» del documento
presentado con anterioridad a éste [] centrándose más en la parte técnica que
en la visión comercial.

=== Alcance

El alcance de este proyecto no dista mucho del propuesto inicialmente: servir
de iniciación al desarrollo de software haciendo uso de distintas técnicas y
herramientas.

== Descripción general

=== Perspectiva del proyecto

Si bien la perspectiva incial del proyecto se centraba en la interacción del
usuario con la pantalla táctil de su terminal móvil, finalmente ésta ha sido
relegada a un segundo plano para centrarse más, a nivel de desarrollo, en la
estructura y codificación del mismo.

=== Funciones de la aplicación

La función principal de la aplicación no es otra que generar una secuencia
aleatoria de N elementos en base a 4 posibles que, posteriormente, presentará
al usuario de forma visual y acústica con el fin de que éste sea capaz de
repoducirla, incrementándose la longitud de la misma en 1 elemento con cada
acierto del usuario.

=== Estructura de la aplicación

Para conseguir la función descrita se ha estructurado el código de la
aplicación de acuerdo a:

  * Programación Orientada a Objetos: a excepción del fichero principal de la
  aplicación, que por imposición ha de tener el mismo nombre que el
  directorio y ser estructurado, el resto de ficheros de la aplicción se
  corresponde con «objetos» que representan los distintos «actores» o
  «entidades» que dan forma a la misma, y que son:

    ** Game, que representa al juego en sí.
    ** Board, para la construcción del tablero.
    ** Board_Button, para instanciar cada
    uno de los 4 «botones» que se corresponden con cada elemento de la
    secuencia, representado por un color y un sonido
    ** Player, que se corresponde con el jugador.
    ** VerticalLayout, encargado de la disposición de todos los elementos
    gráficos, al menos para la orientación vertical
    ** MediaPlayer, que vendría a ser una «wrappe» de las librerías de sonido,
    según corresponda uno u otra dependiendo del sistema/máquina virtual en
    el que se está ejecutando. [Finalmente no termina de funcionar del todo bien]
    ** SequenceThread. Se trata de un objeto «especial» que representa un hilo
    de ejecución y que es necesario para poder mostrar los elementos de la
    secuencia «iluminándose», ya que de lo contrario no habría tiempo de verlos
    puesto que el método «draw()» de Processing «dibuja» la salida una vez que ha
    finalizado toda la ejecución del código que hay dentro del mismo.

  * Utilización de patrones de diseños: concretamente dándole un enfoque MVC
  (Modelo Vista Controlador), sin analizar más profundamente qué otros
  patrones se podían haber aplicado, para así mantener, de alguna forma, el
  código más limpio y ordenado. 

    ** Controlador: apsimon.pde, el «punto de entrada» de la aplicación.
    Pensamos también que, en cierta manera e implícitamente, se está usando aquí el
    patrón Singleton.

    ** Modelos: a pesar de que no hay persistencia, nuestros modelos se podrían
    corresponder con Game, Player Board y BoardButton, si bien estos dos últimos
    pudieran quedar un poco «descolgados» de este enfoque

    ** Vista: aquí tenemos a VerticalLayout y, si los hubiera, todas las otras
    representaciones gráficas de la aplicación. Sin ir más lejos, la inexistente
    «HorizontalLayout». En este punto cabe destacar que debería existir, quizás
    y dado que al fin y al cabo Prossecing no deja apoyarse en Java, una Interfaz
    «Layout» encargada de definir qué métodos ha de implementar todo «XYZLayout»
    existente.

    ** Se nos quedarían fuera el hilo (SequenceThread) y el «wrapper» de audio
    (MediaPlayer) ya que ambos tienen algo de «vista» (a pesar de que para el caso
    de media player la representación sea acústica) y de «modelo», pues de alguna
    forman trabajan con datos (elementos de la secuencia el primero y ficheros de
    audio el segundo) a la vez que los representan.


Aunque se trata de pequeños aspectos más funcionales que estructurales, cabe anotar que

  * La aplicación está, de forma general, en modo «noLoop()», para evitar un
  uso innecesario del procesador.
  * La excepción a lo anterior la encontramos en el hilo «Sequence Thread», que
  precisamente hace uso de «loop()» mientras está «mostrando» la secuencia.
  * Si bien a posteriori hemos sabido, por la aportación de un compañero en
  clase, de la posibilidad de usar «sleep» dentro de un hilo, hemos decidido
  dejar el código que hacía esta función (almacenar el tiempo en ejecución y
  esperar a que éste se hubieran incrementado en X).
  * Todas las llamadas a «redraw()» se hacen en el controlador (apsimon.pde)

  
=== Presentación de la aplicación

Respecto a lo recogido en el dosier anterior, la presentación de la aplicación
se ha quedado sólo en «layout» vertical, manteniéndose la disposición propuesta
para el mismo, incluyendo la subdivisión de la superficie disponible en una
«rejilla» o grid imaginario para la distribución uniforme de los elementos
independientemente del área de dicha superficie.


Como se comentaba en el punto anterior, la idea sería disponer a nivel de
clases de una Interfaz que defina una representación abtracta del lienzo para
que sea extendida por todas y cada una de las representaciones que se deseen
implementar.


=== Recursos utilizados durante el desarrollo

Además de, obviamente, el lenguaje de programación utilizado (Processing), se
ha hecho uso de los siguientes recursos

  * La librería http://code.google.com/p/apwidgets/[APWidgets], para el trabajo
  con el audio y algunos otros elementos en Android.
  * La librería http://code.compartmental.net/tools/minim/[Minim], para el
  trabajo con audio haciendo uso de JavaSound API.
  * La clase
  http://docs.oracle.com/javase/6/docs/api/java/util/Random.html[Random] para
  la generación aleatoria de la secuencia.
  * http://git-scm.com/[Git] para el trabajo en grupo footnote:[En muchos casos
  se está y se estará trabajando en un solo equipo, por lo que la información
  del «commiter» no está vinculada al trabajo/peso real de cada miembro del
  equipo], control de versiones y «sincronización» con el repositorio alojado
  en GitHub.
  * http://github.com[Github] para alojar el repositorio remoto del proyecto.

=== Otros recursos

  * http://soundcloud.com[SoundCloud] y http://www.soundgator.com/[SoundGator]
  para la búsqueda y elección de las pistas de audio que sean necesarias.
  * http://www.methods.co.nz/asciidoc/[Asciidoc] para la generación de este
  documento.
  * https://moqups.com/ para la creación de mockups
  * http://wiki.processing.org/w/Main_Page[Wiki de Processing], para información técnica.
  * http://www.openprocessing.org[OpenProcessing], como «fuente de
  conocimiento» (aunque finalmente sólo se ha codigo el código que general el
  background, haciendo uso de la función «noise()»)
  * http://www.learningprocessing.com[LearningProcessing] para visualizar ejemplos con enfoques
  orientados a objeto (POO).

== Estado actual

A pesar de tratarse de una aplicación experimental y no terminada, centrada más
en el aprendizaje a nivel de desarrollo que en el acabado final de cara al
usuario, se dispone a día de, básicamente, la posibilidad de mostrar una
secuencia y recoger la recreada por el usuario, aumentando el nivel en caso de
acierto.

=== Presentación

A nivel de presentación se dispone a día de hoy de un layout vertical que nos muestra 

  * Nombre/Rótulo de la aplicación
  * Información del nivel actual (de 1 en adelante).
  * Información de la puntuación actual (de 0 en adelante, siendo un
  «acumulador» de los aciertos, contados éstos en base a la longitud de la
  secuencia).
  * Un «tablero», compuesto de los 4 elementos posibles de la secuencia, con el
  que interactuar a fin de conseguir el objetivo.
  * «Pantalla de inicio», que no es más que una leyenda en la pantalla con las
  instrucciones para comenzar (hacer click)
  * «Pantalla de Game Over», en la que se muestra información de nivel y puntos
  obtenidos y la opción para volver a empezar

=== Fallos conocidos

A pesar de los distintos intentos realizados, a la fecha actual y con el tiempo
dedicado, no se ha conseguido tener una aplicación que se comporte de forma
estable tanto en Android como en otro sistema operativo sobre una máquina
virtual de Java. Esto es así principalmente por incompatibilidades entre
librerías, lo que no nos ha permitido poder incluirlas todas para
posteriormente usar unas u otras según el soporte en el que se esté ejecutando,
que era el objetivo de, por ejemplo, «media_player.pde».

El sonido, en Java, sólo se reproduce la primera vez y, en algunas otras
ocasiones, de forma aleatoria. Esto podría ser porque se necesite un objeto
«AudioPlayer» para cada sonido que se vaya a reproducir, si bien es cierto que
se hicieron algunas pruebas sin éxito.

Además, en las últimas pruebas han ocurrido ocasioalmente desbordamiento de
array (ArrayIndexOutOfBoundsException) al mostrar la secuencia propuesta al
usuario. Debe estar relacionado con algunos de los últimos cambios, pero aún no
lo hemos localizado.

=== Mejoras a corto plazo

A pesar de la constante «obsesión» en trabajar de cara a la obtención de un
código limpio, ordenado y con cierta «calidad», creemos que unas tempranas
refactorizaciones podrían ser

  * Utilizar variables/constantes para el cálculo de la diferencia de tiempo
  (millis() - lastTime < DELAY), para el frameRate, tamaños de textos...
  * Utilizar el «coding style» o «code conventions» de Java, para ser más
  homogéneos y ofrecer un código «más legible» a programadores del lenguaje.
  * Utilizar Thread.sleep (manteniendo el DELAY en variable) a fin de reducir
  así el código de SequenceThread.
  * Mejorar la estabilidad y fluidez.

=== Mejoras a medio plazo

A medio plazo, la cantidad de mejoras que se podrían hacer serían casi
innumerables, pero listando las más importantes tendríamos

  * Dar soporte al layout horizontal.
  * Implementar una pantalla inicial.
  * Implementar las pantallas de cambio de nivle.
  * Mejorar la interfaz gráfica (usando elementos 3D, brillo, iluminación...)
  * Añadir niveles de dificultad (por ejemplo, con un límite de tiempo o
  decrementando el DELAY de la secuencia con el paso de nivel).
  * Añadir un top de «mejores puntuaciones».
  * Añadir preferencias de usuario.
  * Posibilidad de multijugador («challenge», duelos).
  * ...
