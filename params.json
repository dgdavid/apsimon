{"tagline":"","body":"# PGL: APSimon, Simon says para Android sobre Processing\r\n\r\n:Author:    Javier Morales y David Díaz\r\n:Date:      24/11/2012\r\n\r\n## Acerca de este documento\r\n\r\nLa intención de este documento es servir de «dossier» en el que recoger las\r\nideas iniciales, borrador y objetivo  para el proyecto de «Desarrollo de Juegos\r\nen 2D» de la asignatura de «Programación Multimedia y Dispositivos Móviles».\r\n\r\n## El proyecto\r\n\r\n### La idea\r\n\r\nSe intentará implementar el conocido y popular juego de los 80\r\n[«Simon says»](http://en.wikipedia.org/wiki/Simon_(game)), creado por Ralph Baer\r\nen 1978, para la plataforma Android haciendo uso del lenguaje de programación\r\n[«Processing»](http://processing.org), distribuido bajo licencia GNU/GPL.\r\n\r\n### Objetivo\r\n\r\nDisponer, al menos, de una versión básica del juego consistente en repetir la\r\nsecuencia aleatoria de N elementos de 4 posibles, generada por el programa y\r\nrepresentada visual y acústicamente. \r\n\r\nCon cada acierto el nivel de dificultad, entendido como la longitud de la\r\nsecuencia, se irá incrementando dando el juego por finalizado al primer fallo.\r\n\r\n### Alcance\r\n\r\nDado que se trata de un proyecto con fines didácticos, la utilidad del mismo no\r\npretende ir más allá de su uso en clase para ganar experiencia y bagaje en el\r\nuso del lenguaje utilizado, resolución de problemas durante el desarrollo e\r\ninteracción, desde el punto de vista del desarrollo, con el terminal.\r\n\r\nNo obstante, se pone al alcance de toda persona que quiera hacer uso del mismo,\r\ncualesquiera sean sus fines, desde el mismo instante en el que se decide hacer\r\nuso de [GitHub](http://github.com) como «repositorio origen»\r\n[https://github.com/JAvilp/apsimon], permitiendo así el acceso al proyecto y su\r\nevolución durante el desarrollo del mismo.\r\n\r\n## Descripción general\r\n\r\n### Perspectiva del proyecto\r\n\r\nEl usuario interactuará con el terminal haciendo uso de la pantalla táctil, a\r\nfin de reproducir la secuencia sugerida.\r\n\r\n### Funciones de la aplicación\r\n\r\nLa aplicación ha de generar una secuencia aleatoria de N elementos en base a 4\r\nposibles que posteriormente representará visual y acústicamente.\r\n\r\nAdemás, mostrará al usuario, haciendo el mayor uso posible de las funciones\r\nprovistas en la API de Processing:\r\n\r\n  * Información del nivel actual (de 1 en adelante).\r\n  * Información de la puntuación actual (de 1 en adelante, siendo un\r\n  «acumulador» de los aciertos, contados éstos en base a la longitud de la\r\n  secuencia).\r\n  * Un «tablero», compuesto de los 4 elementos posibles de la secuencia, con el\r\n  que interactuar a fin de conseguir el objetivo.\r\n  * Texto informativo, de acierto o fracaso, según corresponda.\r\n\r\n### Presentación de la aplicación\r\n\r\nLa presentación se hará mediante una interfaz limpia y sencilla que ha de\r\nadaptarse, en la medida de lo posible, al tamaño del dispositivo en el que se\r\nesté ejecutando, dando mayor relevancia a los elementos con los que ha de\r\ninteractuar el usuario. \r\n\r\nPara ello se ha decidido que el «lienzo» sobre el que se apoya Processing\r\ncoincida con el tamaño del disponible, subdividiéndolo mediante «una rejilla»\r\nde 8 filas y 6 columnas. Esto debería permitir un mejor control sobre el\r\nposicionamiento de los elementos así como un «redimendionado» dinámico. \r\n\r\n.Boceto del Layout subdivido en 8 filas y 6 columnas\r\n\r\nimage::images/apsimon_layout_divide_into_8rows_and_6cols.png[\"Boceto del layout subdivido en rejilla de 8 filas y 6 columnas\"]\r\n\r\n.Disposición de los elementos en el layout vertical\r\nimage::images/apsimon_elements_in_vertical_layout.png[\"Disposición de los elementos en el layout vertical\"]\r\n\r\n.Disposición de los elementos en el layout horizontal \r\nimage::images/apsimon_elements_in_horizontal_layout.png[\"Disposición de los elementos en el layout horizontal\"]\r\n\r\n### Características del usuario\r\n\r\nInicialmente, dado el referido carácter «práctico»/didáctico del proyecto,\r\nel perfil del «usuario final» coincide con el perfil de los desarrolladores:\r\nalumnos en prácticas. Por lo tanto, se les presupone usuarios avanzados, sin\r\ndificultad para desenvolverse con su terminal móvil.\r\n\r\n### Recursos para el desarrollo\r\n\r\nAdemás del uso del ya mencionado lenguaje de programación, Processing, serán\r\nutilizados:\r\n\r\n  * La librería [APWidgets](http://code.google.com/p/apwidgets/), para el trabajo\r\n  con el audio y algunos otros elementos.\r\n  * La clase\r\n  [Random](http://docs.oracle.com/javase/6/docs/api/java/util/Random.html) para\r\n  la generación aleatoria de la secuencia.\r\n  * [Git](http://git-scm.com/) para el trabajo en grupo footnote:[En muchos casos\r\n  se está y se estará trabajando en un solo equipo, por lo que la información\r\n  del «commiter» no está vinculada al trabajo/peso real de cada miembro del\r\n  equipo], control de versiones y «sincronización» con el repositorio alojado\r\n  en GitHub.\r\n\r\n### Otros recursos\r\n\r\n  * [SoundCloud](http://soundcloud.com) para la búsqueda y elección de las pistas\r\n  de audio que sean necesarias.\r\n  * [Asciidoc](http://www.methods.co.nz/asciidoc/) para la generación de este\r\n  documento.\r\n  * [Moqups](https://moqups.com/) para la creación de mockups\r\n  * [OpenProcessing](http://www.openprocessing.org), como «fuente de\r\n  conocimiento» en la que «ojear» algo de código.\r\n  [http://www.openprocessing.org/sketch/20312]\r\n  * http://www.learningprocessing.com para visualizar ejemplos con enfoques\r\n  orientados a objeto (POO).\r\n\r\n## Estado actual\r\n\r\n### Presentación y mockups\r\n\r\nA pesar de que aún no se tiene el layout completamente implementado, los\r\nsiguientes mockups dan idea visual de como quedaría la aplicación\r\ndefinitivamente en el terminal.\r\n\r\n.Pantalla con todos los elementos/colores «desactivados» (no presionados o no sugeridos por la máquina)\r\nimage::images/apsimon_mockup_all_buttons_deactivated.png[\"Todos los botones «desactivados\"]\r\n\r\n.Pantalla con un elemento/color/botón activado (el rojo)\r\nimage::images/apsimon_mockup_one_button_activated.png[\"Un botón activado\"]\r\n\r\n.Pantalla de «Siguiente nivel»\r\nimage::images/apsimon_mockup_next_level.png[\"Siguiente nivel\"]\r\n\r\n.Pantalla de «Game Over!»\r\nimage::images/apsimon_mockup_game_over.png[\"Game Over\"]\r\n\r\n### Clases y objetos\r\n\r\nEn un primer brainstorming pensamos que las clases a implementar podrían ser:\r\n\r\n  * Game, que representaría al juego en sí.\r\n  * Board, para la construcción del tablero.\r\n  * ColouredButton, para instanciar cada\r\n  uno de los 4 «cuadrantes» que se encargarán de autoiluminarse y emitir sonido\r\n  cuando son presionados.\r\n  * CPU, que sería el encargado de generar la secuencia aleatoria que el\r\n  usuario debe repetir.\r\n  * Player, que se corresponde con el jugador.\r\n\r\nLas primeras (y sucesivas) implementaciones de esto se pueden ver directamente\r\nen la «página del proyecto» en GitHub, https://github.com/JAvilp/apsimon\r\n\r\n## Propuestas de futuro\r\n\r\nSiempre que el tiempo lo permitiese, una vez teminada esta parte, podríamos dar paso a:\r\n\r\n  * Dar soporte al layout horizontal.\r\n  * Implementar una pantalla inicial.\r\n  * Añadir niveles de dificultad (por ejemplo, con un límite de tiempo).\r\n  * Posibilidad de multijugador («challenge», duelos).\r\n  * Implementar una presentación 3D.\r\n  * ...","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Apsimon","google":""}